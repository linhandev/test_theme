[
  
  {
    "title": "Arch Linux安装",
    "url": "/posts/Arch-install/",
    "categories": "Linux",
    "tags": "Arch, Manjaro",
    "date": "2021-09-10 00:00:00 +0800",
    





    "snippet": "Arch是一个十分干净简洁的Linux Distro，日常使用占用的硬件资源很少，低配的电脑上也几乎不会卡。滚动更新方式意味着安装之后只需要更新，不需要费劲升级系统版本。Arch的社区可能是一众Linux发行版中最好的，在Arch Wiki里基本能找到所有与系统相关问题的答案，Arch社区甚至对一些使用基于Arch的Linux发行版用户(比如Manjaro)来说都很有用。在AUR(Arch User Respository)的帮助下基本上安装所有的软件都可以只用一行代码。总结起来就是简单而且强大。硬件需求  RAM：512M以上  硬盘：2G以上  网：插网线比较简单，wifi也可  u盘：虚拟机不需要。大概8G就够用，质量好的U盘安装会快很多iso国内可以从清华源下载Arch的iso，速度比较快。或者可以从Arch官方镜像列表里挑一个下载。如果是做虚拟机不需要做启动盘，直接用iso就可以。如果在物理机器上装，Etcher非常适合做任何Linux Distro的安装盘，使用简单而且一般都是一次成功。选盘的时候注意别选错了，否则可能把正在用的电脑的盘格掉。即使手上有之前的安装盘也尽量做一个新的，之前遇到过用一个月之前的安装盘进行安装，出了一些软件兼容的小问题，用最新的镜像可以避免麻烦。开始安装插入做好的启动盘，重启电脑选择U盘作为启动媒体，一般是按F1，F5，F10，F12中的一个键。启动后选择Arch Linux install medium。之后会进到一个命令行，开头的提示符是root@archiso，如下联网安装过程中会下载东西，需要联网。可以ping一个网站检查网络连接。ping baidu.com# ctrl c 停止如果看到 Name or service not know之类的报错就是目前没网。如果有网线直接插上是最简单的方法，不需要进行额外操作。连接wifi可以用iwctl。iwctl device listip link set wlan0 up # 先打开硬件，关闭硬件是downiwctl # 进入iwctldevice list # 列出所有网络设备，一般会有一个lo是环回的，不是这个。需要用的设备大概叫wlan0station wlan0 scanstation wlan0 get-networks # 获取所有wifistation wlan0 connect [wifi name] # 之后输密码quit # 退出iwctl连接完成重新ping一下，这时候应该看到能ping通。连接8021x校园网1 2基本准备就绪，进入正题。键位磁盘分区首先看看电脑是不是开启了uefi，如果开了的话需要多做一个分区。如果没有这个路径那就是没开uefi，下面分区的时候不需要做uefi分区。如果出了一堆文件就是开启了uefi。根据电脑的用途可以采用不同的分区方案，但是至少是需要一个root分区，一般会做一个swap。一些特殊用途的linux比如邮件服务器可能一些路径下会存巨多的文件，这样可以给这个路径单开一个分区放到一个比较大的盘上。这里就做一个uefi，root和swap。lsblk # 查看机器存储硬件情况可以看出我的机器有两块SSDfdisk -l # 同上，信息一般多一些进入fdisk开始创建分区fdisk /dev/盘号 # 注意这块就写到盘，不要写到分区p1p2这种的d # 删除一个分区，多次执行直到提示没有分区首先做efi分区，如果上面没有uefi就跳过这段，直接创建下面的主分区n # 创建分区p # 主分区# 回车，默认分区号# 默认起始位置 todo：还是块大小？+512M # 大小512Mt # 修改分区类型L # 查看所有类型，应该有一个uefiuefi创建主分区np# 回车，默认分区号# 回车，默认起始位置-8G # 这个8G就是给swap留下的大小，根据自己的硬件情况调整创建swapnp# 回车，默认分区号# 回车，默认起始位置# 回车，直接占满剩下的容量t # 修改分区类型# 回车，选择最后一个分区L # 列出所有，应该有一个swapswap分区创建完成，看一下目前磁盘情况，应该有三个分区，类型分别是EFI，Linux和Linux swap。p如果没问题就把修改写入磁盘w # 确认无误后写入lsblk # 再次查看分区情况之后需要在分区上创建文件系统# 没有uefi分区跳过这行mkfs.fat -F32 /dev/[uefi分区]mkfs.ext4 /dev/[主分区]mkswap /dev/[swap分区]swapon /dev/[swap分区]选择镜像下一步需要联网安装软件，选一个快的镜像可以节省很多时间pacman -Syy # 更新pacman数据库pacman -S reflectorcp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bk # 备份镜像列表reflector -c &quot;CN&quot; -l 20 -n 10 --sort rate --save /etc/pacman.d/mirrorlist安装Archmount /dev/[主分区] /mntpacstrap /mnt base linux linux-firmware vim sudo base-devel # 往主分区里安装，几分钟genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstabarch-chroot /mnt校准时间timedatectl list-timezones # 显示所有时区，按q退出timedatectl set-timezone Asia/Shanghaitimedatectl set-ntp true # 开启联网时间校准语言vim /etc/locale.gen# 按 / 进入查找，输入en_US，回车下一条结果# 找到 en_US.UTF-8 UTF-8 这一行# 按i编辑，删除前面的 ## 按两次esc进入命令模式# 按 / 进入查找，输入zh_CN，回车下一条结果# 找到 zh_CN.UTF-8 UTF-8 这一行# 按i编辑，删除前面的 ## 两下esc，输入:wq保存退出locale-genecho LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf设置网络vim /etc/hostname# 按 i 编辑，输入一个hostname# 两下esc，输入 :wq 保存并退出vim /etc/hosts# 按 i 编辑，输入以下内容127.0.0.1 localhost::1 localhost127.0.1.1 [刚才设置的的hostname]# 两下esc，输入 :wq 保存并退出安装grubuefi系统pacman -S grub efibootmgrmkdir /boot/efimount /dev/[uefi分区] /boot/efigrub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi # 注意那个x是小写的grub-mkconfig -o /boot/grub/grub.cfg非uefi系统pacman -S grubgrub-install /dev/[主分区]grub-mkconfig -o /boot/grub/grub.cfg设置密码passwd ＃ 设置密码网络前面设置的网络连接只在这次安装过程中生效，还需要给刚装好的系统装联网软件。下面只写基本的连接wifi的部分，DSL，移动网络之类的连接可以参考这篇详细教程pacman -S wpa_supplicant wireless_tools networkmanagerpacman -S nm-connection-editor network-manager-appletsystemctl enable NetworkManager.servicesystemctl disable dhcpd.service # todo: dhcpd not foundsystemctl enable wpa_supplicant.service这里就可以重启进入只有命令行的系统了，可以选择现在重启看一下前面的步骤是不是做的有问题，下面的步骤在进入系统后做，或者也可以不重启直接继续装。桌面xfce4桌面pacman -S xorgpacman -S xfce4 xfce4-goodies lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settingssystemctl enable lightdm添加用户一般日常使用不会直接用root账户，创建一个用户帐户。useradd [用户名]passwd [用户名] # 设置新用户密码vim /etc/sudoers# 添加一行[用户名] ALL=(ALL) ALL # 允许用户使用sudo# :wq! 保存并退出ls -lah /home/[用户名] # 检查是不是创建了用户的home目录，如果没有或者用户没有权限访问这个目录会在登录的时候登录成功，但是仍然返回登录界面mkdir /home/[用户名]chown -R [用户名]:[用户名] /home/[用户名]安装完成，重启进入系统# 按 ctrl+D 退出 chrootreboot重启之后应该就能看到一个登陆界面，能登陆进去就是安装成功了！如果安装过程中有任何问题欢迎在下方留言。有关一些常用软件的安装在下一篇文章中记录。参考资料：官方安装教程Arch安装教程(不含swap)带swap的安装教程iwctl连接wifi"
  },
  
  {
    "title": "Centos Postfix 邮件服务器",
    "url": "/posts/Personal-Mail/",
    "categories": "Tool",
    "tags": "Centos7, Mail, SelfHost",
    "date": "2021-02-17 01:04:00 +0800",
    





    "snippet": "邮件作为一个关键的服务非常需要稳定，因此用一个大厂提供的邮箱是个很好的选择。但是可能出于隐私，免费/付费邮箱服务的各种限制等原因你会希望自己部署一个邮件服务器(Gmail还是很难抢到一个自己喜欢的用户名的)。因为是要搭一个自己用的服务器，我选择的方案类似一个最小化安装，Postfix MTA + Dovecot IMap + RoundCube网页浏览(可以直接用本地客户端，不装这个)，目标是尽最大可能把系统资源用在刀刃上，不搞那些花里糊少的功能。系统要求  Centos 7  1 CPU  1G 内存  一个域名：可以freenom+cloudflare  服务器          SMTP协议发邮件走25端口，阿里云，腾讯云和Linode都是禁25端口的，需要额外步骤不推荐      Vultr的服务器默认禁25端口，但是提工单可以解封      原理用大厂的邮箱服务发邮件很简单但是背后还是涉及不少步骤，稍作了解很有必要。这篇文章介绍的很通俗易懂。邮件服务器这部分的内容主要根据这篇教程整理，Lionode上还有一篇基本相同但是更详细的教程。主要根据前面这篇是因为他用Linux的帐号系统，第二篇写进SQL更灵活但是也更复杂。加密的部分采用第二篇。首先需要一个自己的域名，并解析到服务器上。linhan.ml A 10 12.34.56.78linhan.ml MX 10 linhan.mlmail.linhan.ml MX 10 linhan.ml给域名加一个A记录指向服务器公网IP。SMTP看MX记录，MX的内容要写服务器域名(MX不能写IP)。之后配置服务器hosthostnamectl set-hostname mail.linhan.mlvi /etc/hosts# 添加一条记录12.34.56.78 linhan.ml安装软件，申请ssl证书yum install -y postfix dovecot epel-releasesudo yum install -y epel-releasesudo yum install -y snapdsudo systemctl start snapdsudo ln -s /var/lib/snapd/snap /snap # enable classic snap supportsudo snap install core; sudo snap refresh core # 更新snapsudo yum remove -y certbot # 确保没有之前安装的cerbot残留sudo snap install --classic certbot # 安装cerbotsudo ln -s /snap/bin/certbot /usr/bin/certbot # 链接到执行路径certbot certonly# 证书都在 /etc/letsencrypt/live/$domain  里之后的步骤是修改各种配置vi /etc/postfix/main.cf# 删掉这两行的 ## inet_interfaces = localhost #---&amp;gt; line no 116# mydestination = $myhostname, localhost.$mydomain, localhost #--&amp;gt; line no 164# 之后在这个文件最后添加下面的部分，并按注释修改# 改成前面设置的hostnamemyhostname = mail.linhan.ml# 改成服务器域名mydomain = linhan.mlmyorigin = $mydomain# 邮件文件存储的路径，按需要修改home_mailbox = mail/mynetworks = 127.0.0.0/8inet_interfaces = allmydestination = $myhostname, localhost.$mydomain, localhost, $mydomainsmtpd_sasl_type = dovecotsmtpd_sasl_path = private/authsmtpd_sasl_local_domain =smtpd_sasl_security_options = noanonymousbroken_sasl_auth_clients = yessmtpd_sasl_auth_enable = yessmtpd_recipient_restrictions = permit_sasl_authenticated,permit_mynetworks,reject_unauth_destinationsmtp_tls_security_level = maysmtpd_tls_security_level = maysmtp_tls_note_starttls_offer = yessmtpd_tls_loglevel = 1smtpd_tls_key_file = /etc/letsencrypt/live/$mydomain/privkey.pemsmtpd_tls_cert_file = /etc/letsencrypt/live/$mydomain/fullchain.pemsmtpd_tls_received_header = yessmtpd_tls_session_cache_timeout = 3600stls_random_source = dev:/dev/urandomvi /etc/postfix/master.cf# 在 smtp inet n – n – – smtpd 行下一行添加submission     inet  n       -       n       -       -       smtpd  -o syslog_name=postfix/submission  -o smtpd_sasl_auth_enable=yes  -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject  -o milter_macro_daemon_name=ORIGINATINGsmtps     inet  n       -       n       -       -       smtpd  -o syslog_name=postfix/smtps  -o smtpd_sasl_auth_enable=yes  -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject  -o milter_macro_daemon_name=ORIGINATING# postfix的设置完成，检查是否有格式错误postfix check下面配置dovecotvi /etc/dovecot/conf.d/10-master.conf# Postfix smtp-auth &amp;lt;-- Line no 95  unix_listener /var/spool/postfix/private/auth {    mode = 0660    user = postfix    group = postfix  }vi /etc/dovecot/conf.d/10-auth.confauth_mechanisms = plain loginvi /etc/dovecot/conf.d/10-mail.conf# 注意这个后面的 ~/mail 要和前面postfix设置的一样mail_location = maildir:~/mailvi /etc/dovecot/conf.d/20-pop3.confpop3_uidl_format = %08Xu%08Xv配置都结束了，重启服务并添加开机自启，添加防火墙规则systemctl restart postfixsystemctl enable postfixsystemctl restart dovecotsystemctl enable dovecotsystemctl start firewalld# postfixfirewall-cmd --permanent --add-service=smtpfirewall-cmd --permanent --add-port=587/tcpfirewall-cmd --permanent --add-port=465/tcp# dovecotfirewall-cmd --permanent --add-port=110/tcpfirewall-cmd --permanent --add-service=pop3sfirewall-cmd --permanent --add-port=143/tcpfirewall-cmd --permanent --add-service=imapsfirewall-cmd --reload使用telnet检测端口是否开启telnet linhan.ml 25ehlo linhan.ml这个方案配置十分简单是因为用了linux的用户而不是写在数据库里，创建一个linux用户就创建对应的邮箱用户useradd -m me -s /sbin/nologinpasswd me到这里邮件服务器部分就已经起来了，配置客户端过程中IMAP应该是143端口，SMTP 587。客户端邮件客户端很多，Thunderbird，MailTime都是不错的选择，谷歌一下根据需要选就行。本地客户端不占用服务器资源但是有个网页客户端做backup总是好的。查了一圈mailpile，rainloop和roundcube都是不错的选择。mailpile是star最多的，但是貌似团队不是很健全开发很慢。rainloop centos7备份自己搭建的服务可能会出现一些错误，时常进行备份十分重要。spam"
  },
  
  {
    "title": "部署个人Git",
    "url": "/posts/Personal-Git/",
    "categories": "Git",
    "tags": "Git, Gitea, Gogs, GitLab, SelfHost, TODO",
    "date": "2021-02-07 19:02:00 +0800",
    





    "snippet": "Github是全球最大的开源社区，一般把自己的开源项目放到Github上可以让更多开发者看到，也不用担心项目丢失。但是一些场景下可能也会希望自己部署Git，比如在国内访问Github一般很慢，如果希望频繁地push和pull那么在国内租服务器架上Git速度可以快上几百倍；看往网上的评价如果希望使用一些CI/CD功能，可能Github不支持或者收费，这时候自己部署更灵活或者可以降低成本。这个Post记录自己安装Gitea，Gogs和GitLab的过程，(目前主要发现这三个比较方便的方案，后期发现其他会继续添加)以及一些体验感受。GiteaGitea由Golang编写。安装步骤基本按照这篇教程。# 升级系统并安装必要的包yum updateyum install -y wget git epel-release tree# 给gitea服务添加用户和存项目的目录useradd gitmkdir -p /etc/gitea /var/lib/gitea/{custom,data,indexers,public,log}chown git:git /var/lib/gitea/{data,indexers,log}chmod 750 /var/lib/gitea/{data,indexers,log}chown root:git /etc/giteachmod 770 /etc/gitea# 查看刚创建的目录tree /var/lib/gitea//* /var/lib/gitea/├── custom├── data├── indexers├── log└── public */# 安装数据库yum install -y mariadb-serversystemctl enable mariadbsystemctl start mariadbmysql_secure_installation # 给root设密码，之后一通 y 就行# 登录数据库建表mysql -u root -pcreate database gitea;grant all on gitea.* to gitea@localhost identified by &#39;Gitea Password&#39;;flush privileges;quit下面就是安装Gitea，可以先到Release页面看一下最新的版本，把版本号写到下面的变量里。这步不是必需的，会不定期更新下面这个版本号# 下载giteaexport GITEAVER=1.13.2wget https://github.com/go-gitea/gitea/releases/download/v${GITEAVER}/gitea-${GITEAVER}-linux-amd64 -O /usr/local/bin/giteachmod +x /usr/local/bin/giteagitea -v# 创建 gitea 服务echo &quot;&quot;&quot;[Unit]Description=GiteaAfter=syslog.targetAfter=network.targetAfter=mariadb.service[Service]RestartSec=2sType=simpleUser=gitGroup=gitWorkingDirectory=/var/lib/gitea/ExecStart=/usr/local/bin/gitea web -c /etc/gitea/app.iniRestart=alwaysEnvironment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea[Install]WantedBy=multi-user.target&quot;&quot;&quot; &amp;gt;&amp;gt; /etc/systemd/system/gitea.servicesystemctl daemon-reloadsystemctl start giteasystemctl status gitea到这里安装基本结束了，访问 http://服务器地址:3000/install 应该就能看到初始化配置的界面。如果是按照上面的步骤安装的应该只需要修改数据库密码之后就可以使用了。GogsGitlab"
  },
  
  {
    "title": "Atom编辑器配置",
    "url": "/posts/Atom/",
    "categories": "Tool",
    "tags": "Atom",
    "date": "2021-01-13 12:56:08 +0800",
    





    "snippet": "Atom是Github开发的一个文本编辑器，十分简洁，基本只内置了文字编辑，Git，语法高亮这些最核心的功能，可以通过插件灵活扩展。目前我的Atom主要用于Python和Web开发，写Markdown，远程代码编辑等。这个Post记录Atom的配置，主题，插件等方面的内容。首先从官网下载Atom安装包安装。apmAtom安装主题和插件用的都是apm(Atom Package Manager)，它安装东西的时候都是用npm下载，国内大概率速度会比较慢。可以通过换源或者代理进行加速。# 换源npm config set registry https://registry.npm.taobao.org # 设置淘宝镜像npm config get registry # 查看是否设置成功# 代理apm config set https-proxy &quot;http://127.0.0.1:6666&quot; # 设置proxyapm config delete https-proxy # 取消proxyapm默认大概安装到 ~/.atom/packages/ 路径下，不同安装进程之间不冲突，可以开多个terminal一起装多个包。大多数包安装完都需要重启atom生效。基础配置主题这个完全看个人喜好，因为需要长时间看屏幕很喜欢暗色的主题，one-dark觉得不错。这里是一个完整的列表。文件缩略图对于比较复杂的项目(比如一个网站)，一般会有多种格式的文件，这样能一眼看出文件类型应该有些用处。 file-type-icons 给不同类型的文件不同的图标，看起来比较清(zhuang)楚(bi)。小地图打王者要看小地图，写代码有时候看一下也挺方便的。比如装上 minimap ， highlight-selected 和 minimap-highlight-selected 之后，选中一个变量，所有跟选中内容相同的字符串就会在小地图中高亮，看起来很方便。Snippet补全对于一些经常要写的格式化内容很有用，Atom支持对指定拓展名的文件自定义模板。编辑 ~/.atom/snippets.cson 文件，以添加一个Jekyll文章开头的yaml为例。&#39;.md&#39;:  &#39;jk head&#39;:    &#39;prefix&#39;: &#39;jk&#39;    &#39;body&#39;:&#39;&#39;&#39;---title: ${1: Default Title}author: Lin Handate:  +8categories: []tags: []math: true---&#39;&#39;&#39;.md代表这个模板只在.md文件中生效；jk head 是补全列表里显示的标题；prefix是你打出这个字符串就进行这个联想；body部分如果只有一行，’内容’ 这种格式就可以，这里因为是需要多行所以是 ‘’‘这样 ‘’‘的。内容部分可以写$1，${2:default}这样的光标位置，而且可以带默认值。一个单行的例子，用于在md文件中插入不会被render的TODO&#39;todo&#39;:  &#39;prefix&#39;: &#39;todo&#39;  &#39;body&#39;:&#39;[//]: # (TODO:)&#39;这个cson文件只要保存就会在atom中生效，不需要重启编辑器。Python补全个人还是比较喜欢用补全的，有的时候是想不起来的函数名，有的时候打到剩最后一个字母补全能防止打错。如果装的话 autocomplete-python 是个不错的选择，支持本地的Jedi和联网的Kite。如果你是刚开始写 Python ， Kite应该会很贴心。代码格式和检查如果是初学比较建议进行格式化，刚开始写很容易养成好的代码习惯，自己看着清楚，别人看着也舒服。很多 Linter 都是带格式化的，但是看好多人都推荐 python-black ，其实各种 Formatter 差别都不是很大。linter-flake8 是 Linter，就是带格式检查的，比较受欢迎，但是个人感觉不是很需要，一 save 一堆 Error 很分心。IPython交互式运行比较方便，但是也容易有不少问题，比如 import ，运行的路径和运行的环境之类。我是不想整明白这些，但是如果要用，Hydrgoen 是个不错的选择。注释复杂的代码不写注释绝对是犯罪， docblock-python 是一个很方便的自动生成函数注释的工具依赖一个Py项目总是需要很多包，python-requirements可以自动搜索项目中所有import了的包，生成requirement.txt。缩进转换个人写代码喜欢用tab，但是复制的其他人的代码可能是4个空格。Atom可以一键调整所有的 tab 和空格，Ctrl-Shift-P 调起类似cmd的窗口，输入 tab to space 或者 space to tab 可以换当前页面所有的tab或space。远程编辑如果你只是本地编写代码本地跑那这个没啥用，但是比如你跑深度学习或者写个服务器上运行的脚本，需要本地写代码服务器上运行，那么远程修改就挺有用。ftp-remote-edit这个包用了一下，效果不错。Markdownlanguage-markdown提供md的高亮，缺这个包所有内容都是一个颜色。Atom架构开放，大量的插件给Markdown编辑带来了丰富的功能。内容结构document-outline 可以在页面右侧显示文章标题结构，方便看到全局，对长内容很有用。预览直接看着代码写显然不够直接，HTML预览是刚需。 Atom自带一个markdown-preview，但是功能比较少。markdown-preview-plus 功能丰富一些，可以对内容进行预览，实时编译。这个包默认代码和预览不会一起滚，在设置中可以开启滚动同步。开关preview的快捷键是，Ctrl-Shift-M。数学公式的符号是可以设置的，比如默认有一个$框起来的认为是公式，可以添加两个 $$ 。这个插件最令人伤感的地方是预览不能放到另一个Atom程序中，我没研究出怎么一个屏幕编辑代码，一个屏幕看预览。多合一markdown-writer 简直是写md必装，针对Jekyll等几个博客系统有专门的功能，方便创建Post，管理tag和category(这几个脚本创建tag和category list)，插入图片等等，功能十分强大。可以在repo里写配置文件，这样设置可以跟着项目一起走。设置详见。在写Jekyll时发现一个问题，Jekyll项目所有 _ 开头的文件夹里面的东西都不会放到Render后的网站里。插入图片时希望图片可以按照文章进行组织，一篇文章的图片都放在一个文件夹。但是用{directory}参数把文章相对项目的路径包含进去会包括 post ，导致所有的图片都不进到最后的 _site 中。设置中好像没好的解决方案，直接修改插件代码手动将这两个字符串滤掉了siteImagesDir: -&amp;gt; templateHelper.create(&quot;siteImagesDir&quot;, @frontMatter, @dateTime).split(&quot;_posts&quot;).join(&quot;&quot;).split(&quot;_drafts&quot;).join(&quot;&quot;)快捷键跳转Ctrl - G 跳转到制定行，报错有行号直接用这个找过去。Ctrl - R 会打一个函数名的列表，选哪个跳转到哪个函数。Ctrl - Shift - F 可以全项目搜索。批量安装将所有要转的包名写入一个文件，直接echo &quot;highlight-selectedminimapminimap-highlight-selectedfile-type-iconsautocomplete-pythonpython-blackdocblock-pythonlanguage-markdowndocument-outlinemarkdown-preview-plusmarkdown-writerpretty-json&quot; &amp;gt;&amp;gt; apm_install_list.txtapm install --packages-file apm_install_list.txt"
  },
  
  {
    "title": "Centos环境配置",
    "url": "/posts/Centos-env-setup/",
    "categories": "Linux",
    "tags": "Centos",
    "date": "2021-01-05 23:22:16 +0800",
    





    "snippet": "Centos是基于RedHat Enterprise Linux开源的一个Linux distro，以极高的稳定性闻名。这个Post讲解将Centos作为服务器，安装软件和进行配置的技巧。虚拟化一些软件（比如mailcow）可能会对服务器的虚拟化技术有要求，用virt-what命令可以推断服务器用的是什么虚拟化技术。一般有要求的都会明确提出来，否则大概就是没有。域名做小程序，做https网站等等一些操作可能需要一个域名。域名可以从freenom免费弄一个，但是如果做邮件服务器注意免费域名可能被当作垃圾邮件或者在一些地方不让用。特别注意如果是服务器在国内，所有ISP都要求域名进行备案，否则域名就算是解析到服务器也只会展示一个漂亮的阻断访问页面提醒你去备案。虽然不能访问网站但是还是可以解析到的，做邮件服务器或者ssh都可以用。httpd从这里开始进入安装，从最好装的开始。如果你希望用服务器托管网页或者你的前端程序需要访问服务器上的一些文件，那么httpd是一个很方便的选择。Apache httpd 是一个网页服务器，虽然在现在的标准下看起来可能有点老了，但是小规模场景下效果也不错，安装和使用都很简单。yum install -y httpd # httpd安装systemctl start httpd # 启动systemctl status httpdsystemctl enable httpd # 开机自动启动# systemctl stop httpd # 关闭服务Centos下，httpd的配置在 /etc/httpd/conf/ 下，用 httpd -t 可以校验修改后的配置有无语法错误。默认网页文件root在 /var/www/html现在为了保证安全，很多服务会强制要求https，比如微信小程序不能做http的访问。httpd配置https最简单的方法一定是LetsEncrept + Cerbot。官网上cerbot是通过snap安装的，需要先装snap。sudo yum install -y epel-releasesudo yum install -y snapdsudo systemctl start snapdsudo ln -s /var/lib/snapd/snap /snap # enable classic snap supportsudo snap install core; sudo snap refresh core # 更新snap安装cerbot，并添加到执行路径sudo yum remove -y certbot # 确保没有之前安装的cerbot残留sudo snap install --classic certbot # 安装cerbotsudo ln -s /snap/bin/certbot /usr/bin/certbot # 链接到执行路径Let’s Encrept并不给ip颁发证书，你需要一个网址指向自己的ip。sudo certbot --apache  # 获取证书并顺手改了httpd的配置# sudo certbot certonly --apache # 只获取证书，不修改配置可能的bug：  网络问题    HTTPSConnectionPool(host=&#39;acme-staging-v02.api.letsencrypt.org&#39;, port=443): Max retries exceeded with url: /directory (Caused by NewConnectionError(&#39;&amp;lt;urllib3.connection.HTTPSConnection object at 0x7f1ac78badc0&amp;gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;))        这个大概是网络的问题，重新跑一遍应该就好了    VirtualHostUnable to find a virtual host listening on port 80 which is currently needed for Certbot to prove to the CA that you control your domain. Please add a virtual host for port 80.# 这是要你在80端口创建一个virtual host，可以在httpd设置中添加&amp;lt;VirtualHost *:80&amp;gt;    DocumentRoot &quot;/var/www/html&quot;    ServerName 域名&amp;lt;/VirtualHost&amp;gt;  找不到ssl模块Could not find ssl_module; not installing certificate.# 首先确定自己有没有ssl模块ls /etc/httpd/modules/ | grep ssl # 如果结果是空的，那需要安装mod_ssl，正常应该显示 mod_ssl.soyum install -y mod_ssl# 确定 mod_ssl.so 存在之后在 httpd.conf 中添加LoadModule ssl_module modules/mod_ssl.so# 之后重新跑申请证书就可以了目前cerbot安装已经自带更新证书了，测试自动更新sudo certbot renew --dry-run# Congratulations, all simulated renewals succeeded:到这就可以通过https访问网页了，证书自动更新，不用担心过期。除了网页之外，你可能有一些类似 Flask 的服务不从httpd走流量，而且可能不好配 https。这样可以用httpd配一个端口转发，用httpd监听一个端口的https流量，转发到一个http端口，之后一个类似 Flask 的进程监听这个http端口。响应的数据走相反方向回到用户。这样任何http的服务就可以通过httpd无痛升级到https，而且在服务器内部转发一下也不会有什么安全问题（个人认为）上面cerboot会把443端口设置成监听https的，可以按照cerboot的写法添加其他端口的监听来代理自己的服务# httpd的配置在 /etc/httpd/conf.dvi /etc/httpd/conf/httpd.conf# 这么写可以把 5000 端口的 https 流量转到接 8000 端口的 http 服务上，如果同时防火墙挡住 8000/tcp ，不向用户暴露，就可以只让用户访问https的版本了Listen 5000 https&amp;lt;VirtualHost *:5000&amp;gt;  ServerName 服务器域名  SSLEngine on  SSLCertificateFile /etc/letsencrypt/live/域名/cert.pem  SSLCertificateKeyFile /etc/letsencrypt/live/域名/privkey.pem  ProxyPass / http://localhost:8000/  ProxyPassReverse / http://localhost:8000/  &amp;lt;Proxy *&amp;gt;    Order deny,allow    Allow from all  &amp;lt;/Proxy&amp;gt;&amp;lt;/VirtualHost&amp;gt;shellTODOshell是我喜欢linux最重要的原因，之前用windows的时候也不知道怎么用命令行，到linux之后发现真是巨方便。shell命令太多了，这里就记一些自己用的多的。菜鸟上有比较全的。for zip in `ls *.zip`; do unzip $zip; doneif [$(docker ps | wc -l) -ne 2]; then echo &quot;有情况&quot;; fi# 查看所有进程top # 如果风扇莫名开始响可以看是哪个进程在用cpu# 查看磁盘占用df # 查看各个挂载点还有多少空间du # 查看一个目录用了多少空间，默认是会递归进去du -sh # 如果只是想看一个总数  ctrl-s 冻结命令行这个时候输入的任何命令会被记录但是不会被执行。  ctrl-q 解冻命令行冻结过程中打的命令在这个时候会执行  ctrl-l 清屏  ctrl-rvimTODO对新手来说，vi是让人极其崩溃的。这里只记录一些基本的vi命令和技巧。vsftpd这个是ftp服务端程序，ftp客户端有其他的选择，但是这个个人比较熟悉。yum install -y vsftpdsystemctl start vsftpd# systemctl enable vsftpd  # 自动启动三思，因为不一定时刻需要，而且没配好ftp服务端有安全隐患# 防火墙配置firewall-cmd --zone=public --permanent --add-port=21/tcpfirewall-cmd --zone=public --permanent --add-service=ftpfirewall-cmd --reload# 备份配置cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bkvi /etc/vsftpd/vsftpd.conf# 之后需要修改一些vsftpd的设置anonymous_enable=NO             # disable  anonymous loginlocal_enable=YES		# permit local loginswrite_enable=YES		# enable FTP commands which change the filesystemlocal_umask=022		        # value of umask for file creation for local usersdirmessage_enable=YES	        # enable showing of messages when users first enter a new directoryxferlog_enable=YES		# a log file will be maintained detailing uploads and downloadsconnect_from_port_20=YES        # use port 20 (ftp-data) on the server machine for PORT style connectionsxferlog_std_format=YES          # keep standard log file formatlisten=NO   			# prevent vsftpd from running in standalone modelisten_ipv6=YES		        # vsftpd will listen on an IPv6 socket instead of an IPv4 onepam_service_name=vsftpd         # name of the PAM service vsftpd will usetcp_wrappers=YES  		# turn on tcp wrappers# 添加白名单# vsftpd will load a list of usernames, from the filename given by userlist_fileuserlist_enable=YES# stores usernamesuserlist_file=/etc/vsftpd/vsftpd.userlist# 白名单，只有在上面文件里的用户才能登录userlist_deny=NO# 限制只能访问自己的 ~ 路径# chroot_local_user=YES# allow_writeable_chroot=YESuserlist_enable=YES + userlist_deny=NO 的意思是只允许 /etc/vsftpd/vsftpd.userlist 中的用户登录。所以将想要允许登录的用户添加到这个文件里，一行一个。之后重启vsftpd服务，如果显示 500 OOPS: bad bool value in config file for: 某个配置变量，那么可能是这行后面有空格之类造成的，可以用下面这行处理一下sed -i &#39;s,\\r,,;s, *$,,&#39; /etc/vsftpd/vsftpd.conf到这ftp基本就配置好了并做了简单的安全措施。本地链接服务器的软件推荐FileZilla。如果ftp协议不好用可以试一下sftp，个人经验sftp比ftp容易成功。ftp能做很多事，如果是生产环境安全方面肯定需要额外差资料研究，这些大概是不够的。MysqlMysql需要通过Oracle维护的单独的一个repo安装，可以下载官网的rpm添加repo之后安装，参考这个教程。但是国内一般这种方法都慢到不行，清华源有这个repo的镜像，参考官方介绍添加repo，下载速度一般都是很快的。下载官方repowget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpmsudo rpm -ivh mysql-community-release-el7-5.noarch.rpmyum update -y添加清华源repoecho &quot;[mysql-connectors-community]name=MySQL Connectors Communitybaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-connectors-community-el7-$basearch/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-tools-community]name=MySQL Tools Communitybaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-tools-community-el7-$basearch/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-5.6-community]name=MySQL 5.6 Community Serverbaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.6-community-el7-$basearch/enabled=0gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-5.7-community]name=MySQL 5.7 Community Serverbaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-$basearch/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-8.0-community]name=MySQL 8.0 Community Serverbaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-8.0-community-el7-$basearch/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql&quot; &amp;gt; /etc/yum.repos.d/mysql-community.repo可能的bug：Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlGPG key retrieval failed: [Errno 14] curl#37 - “Couldn’t open file /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql”一个校验的问题，最简单的workaround是直接禁用校验。在配置里修改 gpgcheck=0 就能下了，但是这种方法不安全。添加完repo就进行安装sudo yum install -y mysql-serversudo systemctl start mysqldmysql_secure_installation # 加强安全，有些版本的初始密码在安装的log文件里，有些默认是空密码如果安到一半出错想要重来，完全卸载mysql用下面两行。如果只是卸了软件，那些忘了的密码之类的还存在数据文件里，装回来还是会需要密码。yum remove mysql mysql-servermv /var/lib/mysql /var/lib/old_backup_mysql # 挪走数据文件，直接删了也行，如果没什么东西备份其实迁移也可以看成是先备份之后原样创建，很多数据库工具都有备份或者迁移功能，但是我使的workbench之前各种出问题。其实mysql自带的mysqldump就能导出创建表格和插入数据的代码，在少量数据的情况下用起来很方便mysqldump -u root -p  &amp;gt; out.sql这样在out.sql中就有了一份创建这个数据库并插入代码的脚本。直接用可能会有问题，有外建约束的时候需要先创建被引的表，dump应该不管这个，之后就是dump的时候会声明字符集，插入到新的数据库如果不支持删掉字符集的声明就行。PHPphp是世界上～ 好的我不说了 /滑稽。貌似CentOS上现在yum的repo只到php5，像wp都要求php7了，最简单的php5安装yum install -y phpsystemctl restart httpdphp -vecho &quot;&quot;&quot;&amp;lt;?php phpinfo();?&amp;gt;&quot;&quot;&quot; &amp;gt; /var/www/html/test.php之后访问 hostname/test.php 可以看到php版本之类的信息。如果网页打不开注意看防火墙设置。php官方推荐通过remi安装，可以自己指定版本，如果有版本要求都推荐这种方法．sudo yum install -y epel-release yum-utilssudo yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpmsudo yum install -y php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysqlndphp -vecho &quot;&quot;&quot;&amp;lt;?php phpinfo();?&amp;gt;&quot;&quot;&quot; &amp;gt; /var/www/html/test.phpWordpress有了httpd，mysql和php就可以跑wordpress了。# 创建sql表和用户mysql -u root -p# 输入密码CREATE DATABASE wordpress;CREATE USER wordpressuser@localhost IDENTIFIED BY &#39;password&#39;;GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY &#39;password&#39;;FLUSH PRIVILEGES;exit# 获取wpcd ~wget http://wordpress.org/latest.tar.gztar xzvf latest.tar.gzsudo rsync -avP ~/wordpress/ /var/www/html/ # 保留权限复制mkdir /var/www/html/wp-content/uploadssudo chown -R apache:apache /var/www/html/*# 之后访问网址　http://example.com/wp-admin/install.phpInfluxDB上面已经装了一个数据库Mysql，但是如果你的需求是时序数据，比如物联网一些传感器定时产生数据的这种，influxDB是专门针对这个的。比如一定时间窗口下的聚合，mysql实现应该就比较麻烦，influx有默认支持。8086/tcp8088/tcpinflux通过yum安装，先添加源cat &amp;lt;&amp;lt;EOF | sudo tee /etc/yum.repos.d/influxdb.repo[influxdb]name = InfluxDB Repository - RHEL \\$releaseverbaseurl = https://repos.influxdata.com/rhel/\\$releasever/\\$basearch/stableenabled = 1gpgcheck = 1gpgkey = https://repos.influxdata.com/influxdb.keyEOF之后安装和启动sudo yum install influxdb # 企业界的东西，装起来就是方便systemctl start influxdb关于怎么使用，官方教程GrafanaGrafana应该是最流行的监控平台，可以对数据库中的数据用多种图表的方式进行展示。老规矩，先添加Grafana源。echo &quot;[grafana]name=grafanabaseurl=https://packages.grafana.com/oss/rpmrepo_gpgcheck=1enabled=1gpgcheck=1gpgkey=https://packages.grafana.com/gpg.keysslverify=1sslcacert=/etc/pki/tls/certs/ca-bundle.crt&quot; &amp;gt; /etc/yum.repos.d/grafana.repo之后安装启动，添加防火墙规则sudo yum install -y grafanasudo systemctl daemon-reloadsudo systemctl start grafana-serversudo systemctl status grafana-serverfirewall-cmd --zone=public --add-port=3000/tcp --permanentfirewall-cmd --reloadPython3Centos7 自带的都是2.x的 python，一些包现在已经开始drop对2.x的支持，比如cv2的安装就很费劲，因此上一个3.x的 python 是很有必要的。最初写这个的时候Centos上的repo里最高只到py34，pip都装不上。但是yum已经支持到了py36，而且带pip。sudo yum install -y python3如果需要更高版本，py36以上目前我只知道可以通过源码编译安装。下面的脚本在37,38,39中的一个版本中都测试通过。# 首先做一波升级sudo yum update -y# 因为是编译安装所以需要装一波编译依赖yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum install -y libffi-devel zlib1g-devyum install zlib* -y# python.org 下载 .xz 源码压缩包VERSION=3.7.9 # 3.7.9, 3.8.8, 3.9.2 测试通过# 从python官网下载可能较慢，华为有一个镜像。不带最后的 /base_url=https://www.python.org/ftp/python # https://mirrors.huaweicloud.com/pythonwget ${base_url}/${VERSION}/Python-${VERSION}.tar.xztar -xvf Python-${VERSION}.tar.xz # 解压到当前目录mkdir /usr/local/python3cd Python-${VERSION}./configure --prefix=/usr/local/${VERSION} --enable-optimizations--with-ssl# [TODO] with-ssl 不好使# 第一个指定安装的路径，不指定的话，安装过程中可能软件所需要的文件复制到其他不同目录，删除软件很不方便，复制软件也不方便# 第二个可以提高python10%-20%代码运行速度time make &amp;amp;&amp;amp; make install # 之后需要编译很长时间，看起来比较吃CPU和IO# 编译应该不会出什么问题，如果正常结束了就创建到可执行程序的软链接ln -s /usr/local/${VERSION}/bin/python3 /usr/local/bin/python3ln -s /usr/local/${VERSION}/bin/pip3 /usr/local/bin/pip3# 到这就可以在命令行直接运行 python3 了python3 # 之后就能看到版本了，ctrl+d 退出# 安装 pipcurl -O https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py换pip源如果服务器在国内，从pypi下载是比较慢的。一些云服务厂商会提供pypi镜像，内网下载会很快。mkdir ~/.pipecho &quot;[global]index-url=https://mirror.baidu.com/pypi/simple&quot; &amp;gt; ~/.pip/pip.configPaddle-ServingTODO完善内容甲方有一个深度学习的推荐需求，因此做一个paddleserving。之前用的tfserving是跑在docker容器的，因为当时也菜装的极其绝望，推理相应速度飘忽补丁而且经常自己死掉。但是paddle-serving看起来很简单  paddle官网 paddle-serving github 20年3月paddle-serving 还没有py3的版本，git上说4,5月份会有，pip找不到包的时候注意 之后我这里pip安装有报错，简单来说是这样error: command ‘gcc’ failed with exit status 1  —————————————-  ERROR: Failed building wheel for subprocess32正常pip应该是不会有问题的，这里是因为少依赖yum install python-develMail服务器一般不希望装很多东西，如果就是想发个邮件可以用服务器smtp控制其他邮件服务发，服务器上不需要装。服务器就做了很简单的设置vi /etc/mail.rcset from=邮箱账号 smtp=smtp.qq.comset smtp-auth-user=邮箱账号  smtp-auth-password=邮箱密码set smtp-auth=loginecho &quot;邮件主题&quot; | mail -s &quot;邮件内容,这是测试邮件&quot; xx@163.com之后就发出去了。但是邮件服务那边必须开通smtp服务，一般在邮箱的设置里面。需要提一下的是qq邮箱smtp服务开通之后邮箱用的密码不是qq密码，而是开通的时候给的密码，写的时候不要写错了。而且开了smtp要注意发出去的邮件，之前遇到过smtp的密码被破了，自己的邮箱被人用来批量发开发票的广告。。桌面虽然服务器基本不需要桌面，但是有一些需求可能会需要。Gnome的桌面比较重，个人比较喜欢XFCE。yum -y install epel-releaseyum -y groupinstall &quot;X Window system&quot; # 大概270个包yum -y groupinstall &quot;Xfce&quot; # 大概140多个包systemctl isolate graphical.target # 开启桌面Gnome的安装也很简单yum groupinstall -y &quot;GNOME Desktop&quot; # 大概1200个包# 网上的教程中还有装这个的，少上100个左右的包，效果应该是一样的yum -y groupinstall &quot;Server with GUI&quot; # 大概1000个远程GUIhttps://linuxize.com/post/how-to-install-and-configure-vnc-on-centos-7/TODO服务器本身没有显示器，但是有很多方案把服务器上的图形界面展示到自己电脑的屏幕上。这个方向基本两个解决方法，VNC和X11forwarding，forwarding比较好弄，但是一般比较卡，需要好好配置。vnc可以在本地关掉窗口之后还继续运行，很方便。yum -y groupinstall X11  # 大概300个包sudo yum install -y tigervnc-serveruseradd vncsudo cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.servicesudo vi /etc/systemd/system/vncserver@:1.service# 把里面的用户名改了sudo systemctl daemon-reloadsudo systemctl enable vncserver@:1.servicesudo systemctl start firewalldfirewall-cmd --add-port=5901/tcp --permanent# sudo firewall-cmd --permanent --zone=public --add-port=5904-5905/tcpsudo firewall-cmd --reloadsu vncvncserversudo systemctl daemon-reloadsudo systemctl restart vncserver@:1.service# 关闭一个桌面vncserver -kill vultr.guest:1清理服务器用的时间长了可能各种log，各种cache之类的东西会占很大的磁盘，因此可以考虑定期进行清理。需要注意只要是删除东西的操作都是危险的，要知道自己在干什么。完整教程用户管理添加一些低权限的用户给别人使用能防止意外的故障。useradd [username]passwd [username]gpasswd -a username wheel # 添加sudo权限userdel [username]Python webflask + gunicorn + supervisor当你通过命令行登录服务器启动了一个进程后，退出服务器会默认终止这个进程。如果你不想进程随着退出ssh被kill掉可以使用nohup命令。如果你有一个flask app 在 flask_app.py 里，那么可以执行nohup python flask_app.py &amp;amp;但是nohup有时候很不稳定，而且没有进程出问题后自动重启，这显然不是一个好的方法，flask本身的WSGI不是为了生产设计的，也不是很稳定。推荐使用gunicorn这种生产级别的wsgi。如果要https可以用端口映射的方式，不一定要在gunicorn中配https。supervisor和systemd类似，是用来保证进程一直运行的，如果进程除了问题supervisor可以重启进行，保证后台的稳定。# 安装yum install supervisor# 设置一般在 /etc/supervisord.conf ,至少大概在etc下systemctl daemon-reloadsystemctl start supervisordsystemctl status supervisordsystemctl enable supervisord# 到这supervisord本身应该就起来了，之后编辑supervisord.conf添加program[program:test]directory=/path/to/executecommand=python3 main.pyuser=rootautostart=trueautorestart=trueredirect_stderr=truestderr_logfile=/path/to/errlogstdout_logfile=/path/to/stdlogsupervisorctl reread # 如果改了config文件，这个命令加载新的supervisorctl stop [appname]supervisorctl start [appname]supervisorctl restart [appname]在调试过程中可能有时候没有正确关闭服务，这样就会出现address already in use。这个时候重启肯定可以释放端口，但是有点麻烦，可以通过下面一行代码找到占用端口的进程+杀掉它。慎用，他不管这个端口是什么服务fuser -k 4000/tcpRuby主要是为了gollum wiki要装ruby，把ruby和gollum都记一下。ruby貌似不自举，写这个记录的时候基于c的ruby一个依赖有bug，不知道怎么解决，所以用的jruby，安装教程。装ruby的时候不写版本号写jruby就行。之后直接yum install -y epel-releaseyum install -y gogem install -y gollumgollum # 开始运行软件版本TODO详细研究sudo alternatives --config cmake"
  },
  
  {
    "title": "通用Linux功能",
    "url": "/posts/Linux-utils/",
    "categories": "Linux",
    "tags": "Shell, Git, Archive, TODO",
    "date": "2021-01-05 22:02:00 +0800",
    





    "snippet": "查看系统资源占用linux有很多manylinux的工具可以查看系统中资源的使用情况网络https://www.binarytides.com/linux-commands-monitor-network/nloadCPUtopGPUnvidia-smi内存磁盘dudfGitgit以行为单位追踪更改，比如在一行文本里改了一个字，那么git看作删掉这一行之后添加上修改过的那一行相关完整教程 Github Git Handbook重要文件  .git：git的历史记录都放在这里，这个文件夹删掉了，这个项目copy中的历史就没了，这个路径也就不在是一个repo  .gitignore：让git不跟踪一些文件，比如py代码的package都会生成一个目录，但是没必要推到服务器上，所以就可以忽略这些文件  README.md：所有其他开发者看到这个项目一般都会先读readme      LICENSE：项目采用的协议，如果不加可能一些注意版权的人会不敢用你的项目    repo：一个包含.git的目录  commit：对所有代码在不同时间的snapshot历史  branch：历史中的一根链基础用法git config --global user.name &quot;Lin Han&quot;git config --global user.email &quot;linhandev@qq.com&quot; # 这个只是git在历史文件里记的东西，邮箱写什么Github都推的上去，但是最好和自己的Github账户保持一致。之前遇到过在百度pr需要签协议，因为一个commit邮箱写的不一样需要签两份贡献协议git init # 初始化一个repogit add * # 跟踪当前路径下所有文件git commit -m &quot;Initial Commit&quot; # 创建一个commit记录git clone # 从服务器上拉一个项目下来git status # 查看当前修改，commit的状态git rm --cached file # 加cache是从最后一条commit中删除file的记录git rm file # 从commit记录和文件系统中删除一个文件git branch # 创建一个branchgit checkout # 切换到一个branch，在当前branch的修改如果commit了就不会带到另一个branch，否则会跟着过去# 在branch a中添加文件，branch b中也会多出这个文件；在branch a中删除文件，brnach b中不会跟着删除git branch -m &amp;lt;new name&amp;gt; # 对一个branch改名git branch -d &amp;lt;local branch name&amp;gt;git push origin --delete &amp;lt;remove branch name&amp;gt;git merge#TODO: 研究在merge的时候压缩所有commitgit remote add origin &amp;lt;服务器项目网址&amp;gt; # 添加服务器上项目的repogit push --set-upstream origin &amp;lt;remote-branch&amp;gt; # 推到origin的一个branch里git config credential.helper storegit config --global http.proxy &#39;socks5://127.0.0.1:2333&#39; # 设置proxy，加速下载删除记录https://itextpdf.com/en/blog/technical-notes/how-completely-remove-file-git-repository删除所有commit修改branch名https://linuxize.com/post/how-to-rename-local-and-remote-git-branch/压缩tartar是linux用来创建备份文件的命令，好像zip至少也要1级压缩，可能不能只打包，对于需要重复解包的数据比较快。应该是能保存linux的权限，这对一些web应用来说很方便。 详细的命令菜鸟上有介绍。# 创建一个包# c 创建# z 压缩# v verbos,显示过程# f 备份文件tar -czvf name.tar.gz file# 追加文件# r 追加文件,不写x应该也会跟着包的压缩方式一起压缩tar -rvf name.tar file# 取出文件# x 解压# 如果写文件名是就取一些文件, 不写文件名就都拿出来# -C 指定解压目标路径tar -xvf name.tar filegzip感觉gzip是用着最方便的，而且像平时做医学影响，nii和nii.gz都可以直接读。# 分别压缩目录下没一个文件成一个 gzgzip *# 解压一个文件或者一个目录下所有文件gunzip filenamezipzip感觉一般如果想让windows也能用才用到这个。zip用起来，没有gzip方便，如果一个目录下每个文件想单独打一个包需要写for。zip archive.zip filenamezip -r archive.zip folder# -o 如果目标文件存在覆盖# -n 如果目标文件存在跳过# -d 设置解压到的目录unzip archive.zip# 文件太大了会很不方便todo 卷怎么合并zip -r a.zip a --split-size 5g # 分卷，每卷最多5gzipsplit -n ...(这块是b为单位的) a.zip # 已经压缩好的包拆卷#  10737418240 是10g，拆包之前会告诉一共拆几个包7zip7zip压缩率高，win/linux上都有，也是个很受欢迎的格式。一般linux不预装。7z和gzip或zip相比一个优点是压缩的时候会先扫所有文件，在压缩过程中给一个进度条，而且应该是会根据压缩算法估计最终的文件大小，对盘不够大的情况可以避免压了很久最后放不下。yum install -y p7zip p7zip-plugins7z a name.7z folder/file # a 是添加7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on archive.7z dir1 # 网上的最大压缩比参数7z a -t7z -mx=9 -mfb=273 -ms -md=31 -myx=9 -mtm=- -mmt -mmtf -md=1536m -mmf=bt3 -mmc=10000 -mpb=0 -mlc=0 archive.7z inputfileordir # 文档中的最优设置7z a -ttar name.tar folder # 创建tar包中文解压windows上压缩的zip经常使用GBK编码，到Linux上解压就是乱码。zip标准还没有给文件名格式留位置所以这个问题基本没有好的通用解决方法。但是如果你直到这个文件大概率是gbk的可以试试这个脚本。crontabcrontab的功能是按照你定义的时间规则，定时执行任务。时间规则的编辑大概是这样crontab -e # 添加一行分 时 日 月 周几*：无论是什么值都执行： * * * * * 这样就是每分钟都执行数字：只要到这个值就执行：5 * * * * 任何一个小时的 5分 执行*/数字：每这么多执行: */5 * * * * 每五分钟执行crontab如果做一个监控进程，发现错误可以结合下面的发邮件告警。监控crontab本身是否正常执行可以用cronhub，免费用户可以添加两个监控。换源pip安装python -m ensurepip --upgrade或wget https://bootstrap.pypa.io/get-pip.pypython get-pip.py换源。pip config set global.index-url https://mirror.baidu.com/pypi/simple# pip config unset global.index-url源地址存在 ~/.config/pip/pip.conf 下。比如使用百度源时，pip.conf内容如下：[global]index-url = https://mirror.baidu.com/pypi/simplenpm添加磁盘fdisk -l # 显示所有磁盘mkdir /data # 给新的磁盘创建mount路径vi /etc/fstab# 照着上面的格式添加一行# 磁盘名（按照fdisk里的写，比如 /dev/nvme1n1p1）中间的按照上面# 最后一个数是是否启动检查，第一次建议设成0，如果盘做的有问题会启动失败。重启和访问都成功之后再设成非0/etc/fstab 介绍格式化和mount盘介绍网络ifconfig eth0 192.168.1.5 netmask 255.255.255.0 uproute add default gw 192.168.1.1echo &quot;nameserver 1.1.1.1&quot; &amp;gt; /etc/resolv.confping baidu.comip addr showip link set eth10 upip route show防火墙systemctl start firewalldsudo firewall-cmd --zone=public --permanent --add-port=59966/tcpsudo firewall-cmd --zone=public --permanent --add-service=httpsudo firewall-cmd --reload"
  },
  
  {
    "title": "Medical Dataset",
    "url": "/posts/Medical-Dataset/",
    "categories": "",
    "tags": "",
    "date": "2020-10-28 00:00:00 +0800",
    





    "snippet": "医学影像数据集集锦前言本项目的目标是整理一个医学影像方向数据集的列表，提供每个数据集的基本信息，并对其中License允许的提供不限速下载。项目按照数据集关注的器官对其进行分类。需要整理的数据集很多，我们十分期待大佬们为项目作出贡献。  如果您发现项目已有的内容中有任何错误（包括但不限于md格式问题，网址失效，数据错误，简介信息补充等），可以通过Pull/Request进行修正。  如果您想用的数据集没有出现在列表中，请按照模板提交Issue，并尽量详细地描述数据集信息。我们会尽快添加，若License允许可以免费代下。当前共收录约 20 个方向的 70+ 个数据集转载请联系项目维护者:me@linhan.email目录=================  肝脏          LiTS      Sliver07      3D-IRCADB      CHAOS      TCGA-LIHC      MSD肝脏血管分割        肺          MSD肺癌分割      LoLa11肺叶分割      StructSeg2019      肺部多病智能诊断      CheXpert      NIHChest Xray      QIN Lung CT      4D-Lung      NSCLC-Radiomics      vessel12 肺部血管分割      肺结核                  Shenzhen Hospital X-ray Set          Montgomery County X-ray Set                    肺炎                  Ieee8023          covid19-ct-scans          COVID-CT          Figure1-COVID-chestxray-dataset          RSNA肺炎检测          CovidX          Flyai Covid          covid19-radiography-database          COVID-19-AR          CT Images in COVID-19                    肺结节                  LIDC-IDRI          LUNA16          天池肺部结节          LNDB          Lung Nodule Malignancy          Data Science Bowl 17          Lung-PET-CT-Dx                    气胸                  SIIM-ACR Pneumothorax Segmentation                      胸          CBIS-DDSM      QIN Breast      Rider Breast MRI      ACRIN 6688      BraTS2015        脑          MSD脑瘤分割      MSD海马体分割      Iseg2019      ABIDE      ADNI      CQ500      脑出血                  RSNA Intracranial Hemorrhage Detection                      肾脏          Kits19        肠          CT COLONOGRAPHY      MSD肠道分割数据集        心脏          EchoNet      MMWHS      MSD心脏分割      主动脉                  冠状动脉分割                      眼睛          DRIVE      ODIR-5k      FIRE 视网膜图像数据      STARE      CHASE_DB1      IDRiD        细胞          Data Science Bowl 18      血细胞涂片分类      ISBI细胞跟踪        骨骼          MURA-1.1      RSNA Bone Age      磁共振图像脊柱结构多类别三维自动分割      膝盖                  MRNet                    脊椎                  Verse大规模脊椎分割数据集                      前列腺          PANDA      MSD前列腺分割      QIN-PROSTATE-Repeatability        胰腺          MSD胰腺分割      PDMR-833975-119-R        皮肤          SIIM-ISIC Melanoma Classification        VQA          PathVQA        内窥镜          SARAS-MESAD      SARAS-MESAD        医学影像数据库  参考项目/列表  贡献者  Release Note肝脏LiTS            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  LiTS      肝脏/肝脏肿瘤      分割      CT      131+70      0/1标签      nii      CC 4.0      LiTS数据集包含131套训练扫描和70组测试数据，其中70组测试数据标签不公开。LiTS训练集中包含3DIRCADB中的所有数据，所以如果合并多个数据集不要合并这两个。Medical Segmentation Decathlon中肝脏分割的数据集就是LiTS。分割结果可以在线提交进行评估，在线提交方法参考。 在线提交地址数据集论文：The Liver Tumor Segmentation Benchmark (LiTS)相关项目： 基于Paddle的肝脏CT影像分割Aistudio下载Sliver07            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  Sliver07      肝脏      分割      CT      20+10      0/1标签      MetaImage      Other      这个数据集比较老了，现在用的也比较少，一些研究会将sliver和lits合起来，这样基本上就是所有常用的关于肝脏分割的公开数据了。mhd格式可以用 SimpleITK 读，在medseg项目中有转换成nii的脚本Aistudio下载3D-IRCADB            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  3D-IRCADb 01 02      肝脏/肝肿瘤      分割      CT      20+2      surface mesh      dcm      CC      3D-IRCADb是比较早的一个数据集，有两个子集，分别包含20组和2组CT片子。Aistudio下载CHAOS            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  CHAOS      肝/肾/脾      分割      CT+MRI      40CT+120MRI      0/1标签      dcm      CC 4.0      CHAOS是一个多脏器，多模态分割数据集。Aistudio下载TCGA-LIHC            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  TCGA-LIHC      肝             CT/MR/PT      97患者/237套      无标签      dcm      Other      Aistudio下载MSD肝脏血管分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD肝脏血管分割      肝脏血管      分割      CT      443      0/1      nii      CC-BY-SA 4.0      Aistudio下载肺MSD肺癌分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD肺癌分割      肺脏      分割      CT      96      0/1      nii      CC-BY-SA 4.0      Aistudio下载LoLa11肺叶分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  LoLa11      None      分割      CT      55      None      Metaimage      Other      LoLa11 包含55套CT数据，未发现任何公开标注信息zenodo下载StructSeg2019            名称      标注内容      类型      模态      数量      标签格式      文件格式                  StructSeg2019                                                肺部多病智能诊断            名称      标注内容      类型      模态      数量      标签格式      文件格式                  肺部多病智能诊断                    CT                           CheXpert            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  CheXpert                                                Other      介绍论文： CheXpert: A Large Chest Radiograph Dataset with Uncertainty Labels and Expert Comparison相关项目NIHChest Xray            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  NIHChest Xray      14种肺部疾病/部分病灶位置      分类/检测      CXR      112,120      csv      png      CC0: Public Domain      介绍论文： ChestX-ray8: Hospital-scale Chest X-ray Database and Benchmarks on Weakly-Supervised Classification and Localization of Common Thorax DiseasesAistudio下载QIN Lung CT            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  QIN Lung CT      非小細胞癌             CT      47             dcm      Other      Aistudio下载4D-Lung            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  4D-Lung      非小細胞癌             CT             20      dcm      Other      Aistudio下载NSCLC-Radiomics            名称      标注内容      类型      模态      数量      标签格式      文件格式                  NSCLC-Radiomics      非小细胞癌　      分割　      　CT      422             dcm      Aistudio下载vessel12 肺部血管分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  vessel12 肺部血管分割      肺部血管      分割　      　CT      20             raw             Aistudio下载肺结核Shenzhen Hospital X-ray Set            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Shenzhen Hospital X-ray Set      肺结核/正常      分类      CXR      662      类别      图片      深圳第三医院收集的肺结核胸透数据集，包含326张正常扫描和336张不正常的扫描。Aistudio下载Montgomery County X-ray Set            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Montgomery County X-ray Set      肺结核/正常      分类      CXR      138      类别      图片      蒙哥马利市收集的肺结核胸透数据集，包含80张正常的扫描和58张不正常的扫描。Aistudio下载肺炎Ieee8023            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Ieee8023      肺脏      分类      CT      20             nii      持续搜集公开的新冠CT扫描，目前有20个病例。Aistudio下载covid19-ct-scans            名称      标注内容      类型      模态      数量      标签格式      文件格式                  covid19-ct-scans      左右肺/新冠感染      分割      CT      20             nii      数据来自Ieee8023，对20组扫描进行了左右肺和感染区的标注。基于这个数据集和另外几个数据集，大佬们做了一个新冠分割的 benchmarkAistudio下载COVID-CT            名称      标注内容      类型      模态      数量      标签格式      文件格式                  COVID-CT             分类      CT      349             图片      包含216名新冠患者的349张胸部CT图片，从相关paper中收集。Aistudio下载Figure1-COVID-chestxray-dataset            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Figure1-COVID-chestxray-dataset             分类      CXR      48             图片      DarwinAI收集的一些新冠CT的图片，是CovidX数据集的一部分。持续更新，使用前可以先pull。Aistudio下载RSNA肺炎检测            名称      标注内容      类型      模态      数量      标签格式      文件格式                  RSNA肺炎检测      之否肺炎/肺炎区域BB      分类/检测      CXR      26684+3000             图片      RSNA是北美放射学会在Kaggle上组织的一个比赛数据集，数据来自NIH。包含26684张训练数据，有图片的分类和肺炎区域的边界框。Aistudio下载CovidX            名称      标注内容      类型      模态      数量      标签格式      文件格式                  CovidX      新冠/其他肺炎/正常      分类      CT      13569+231             图片      CovidX数据集是DarwinAI训练CovidNet做的一个数据集，本身没有新的数据，是Ieee8023，Figure1和RSNA组合成的一个数据集。Flyai Covid            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Flyai Covid                                                Flyai举办的一个新冠分类比赛。Aistudio下载covid19-radiography-database            名称      标注内容      类型      模态      数量      标签格式      文件格式                  covid19-radiography-database      新冠/其他肺炎/正常      分类      CT      219+1314+1345             图片      跟CovidX一样是一个组合数据集，数据来自论文图片和RSNA。Aistudio下载COVID-19-AR            名称      标注内容      类型      模态      数量      标签格式      文件格式                  COVID-19-AR                                         dcm      Chest Imaging with Clinical and Genomic Correlates Representing a Rural COVID-19 Positive Population (COVID-19-AR)Aistudio下载CT Images in COVID-19            名称      标注内容      类型      模态      数量      标签格式      文件格式                  CT Images in COVID-19      无标签      分类/分割      CT      650      无      nii      Aistudio下载肺结节LIDC-IDRI            名称      标注内容      类型      模态      数量      标签格式      文件格式                  LIDC-IDRI      肺部肿瘤      目标检测      CT      1012      xls      dcm      介绍论文： The Lung Image Database Consortium (LIDC) and Image Database Resource Initiative (IDRI): A Completed Reference Database of Lung Nodules on CT ScansThe public cancer radiology imaging collections of The Cancer Imaging ArchiveAistudio下载 Part1 Part2LUNA16            名称      标注内容      类型      模态      数量      标签格式      文件格式                  LUNA16                                                Aistudio下载天池肺部结节            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  天池肺部结节      肺部结节      检测      低剂量肺部CT      1000(初赛) + 2000(复赛)      位置+直径      mhd      Custom      LNDB            名称      标注内容      类型      模态      数量      标签格式      文件格式                  LNDB      直径大于3mm的肿瘤分割标注/小于3mm肿瘤和非肿瘤标记中心      分割/分类      CT      294      XML      MetaImage      介绍论文： LNDb: A Lung Nodule Database on Computed TomographyAistudio下载Lung Nodule Malignancy            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Lung Nodule Malignancy      肺结界良恶性      分类      CT      4165+2526             tif      Aistudio下载Data Science Bowl 17            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Data Science Bowl 17                                                Aistudio下载Lung-PET-CT-Dx            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Lung-PET-CT-Dx      肺癌　      目标检测      CT      363      xml      dcm      气胸SIIM-ACR Pneumothorax Segmentation            名称      标注内容      类型      模态      数量      标签格式      文件格式                  SIIM-ACR Pneumothorax Segmentation                                                胸CBIS-DDSM            名称      标注内容      类型      模态      数量      标签格式      文件格式                  CBIS-DDSM      正常/良性/恶性      分类      CT      2620                    介绍论文： Deep Learning to Improve Breast Cancer Early Detection on Screening Mammography A curated mammography data set for use in computer-aided detection and diagnosis researchAistudio下载QIN Breast            名称      标注内容      类型      模态      数量      标签格式      文件格式                  QIN Breast 0102                    MRI      67                    Aistudio下载Rider Breast MRI            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Rider Breast MRI                    MRI                           ACRIN 6688            名称      标注内容      类型      模态      数量      标签格式      文件格式                  ACRIN 6688                    CT      83                    Aistudio下载BraTS2013            名称      标注内容      类型      模态      数量      标签格式      文件格式                  BraTS2013                                                BraTS2015            名称      标注内容      类型      模态      数量      标签格式      文件格式                  BraTS2015                                                Aistudio下载BraTS2021            名称      标注内容      类型      模态      数量      标签格式      文件格式                  BraTS2015                                                脑MSD脑瘤分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD Brain Tumor Segmentation      胶质瘤/肿瘤/水肿      分割      MRI      484 Train + 266 Test      0/1      nii      CC-BY-SA 4.0      Aistudio下载MSD海马体分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD Hippocampus Segmentation      海马体      分割      MRI      394      0/1      nii      CC-BY-SA 4.0      Aistudio下载Iseg2019            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Iseg2019                                                ABIDE            名称      标注内容      类型      模态      数量      标签格式      文件格式                  ABIDE      是否有自闭症      分类      MRI      539+573                    自闭症患者的头部MRI扫描，包含539例自闭症患者和573个正常扫描对照组。  介绍论文： The autism brain imaging data exchange: towards a large-scale evaluation of the intrinsic brain architecture in autism.下载地址ADNI            名称      标注内容      类型      模态      数量      标签格式      文件格式                  ADNI                                                介绍论文： Alzheimer’s Disease Neuroimaging Initiative (ADNI)CQ500            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  CQ500             分割             CT      491组扫描             by-nc-sa 4.0      介绍论文:Development and Validation of Deep Learning Algorithms for Detection of Critical Findings in Head CT Scans脑出血RSNA Intracranial Hemorrhage Detection            名称      标注内容      类型      模态      数量      标签格式      文件格式                  RSNA Intracranial Hemorrhage Detection                    CT                           Aistudio下载肾脏Kits19            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  Kits19      肾脏/肾肿瘤      分割                                         Aistudio下载肠CT COLONOGRAPHY            名称      标注内容      类型      模态      数量      标签格式      文件格式                  CT COLONOGRAPHY                    CT                           包含没有结肠息肉，有6-9mm息肉和大于10mm息肉的数据。MSD肠道分割数据集            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD肠道分割数据集      结肠癌原发病灶      分割      CT      126训练+64测试                    CC-BY-SA 4.0      Aistudio下载心脏EchoNet            名称      标注内容      类型      模态      数量      标签格式      文件格式                  EchoNet      心脏      分割      MRI      10300      0/1             介绍论文： EchoNet-Dynamic: a Large New Cardiac Motion Video Data Resource for Medical Machine LearningMMWHS            名称      标注内容      类型      模态      数量      标签格式      文件格式                  MMWHS      心脏      分割      CT / MRI      20CT、20MRI      类别      nii      mmwhs是心脏分割数据集，共有8类，MRI和CT两种模态  相关项目： Hybrid Loss Guided Convolutional Networks for Whole Heart ParsingAistudio下载MSD心脏分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD心脏分割      左心房      分割      MRI      20(训练)+10(测试)                    CC-BY-SA 4.0      Aistudio下载主动脉冠状动脉分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  Automated Segmentation of Coronary Arteries      冠状动脉      分割      CTA      40+20                    Custom      Grand Challenge下载眼睛DRIVE            名称      标注内容      类型      模态      数量      标签格式      文件格式                  DRIVE      眼底血管      分割      眼底照片      40      0/1      图片      DRIVE数据集是一个糖尿病病人眼底血管分割数据集。Aistudio下载ODIR-5k            名称      标注内容      类型      模态      数量      标签格式      文件格式                  ODIR-5k      正常和7种疾病      分类      眼底彩色照片      5000             图片      ODIR-5K包括5000名患者的年龄，双眼的彩色眼底照片和医生的诊断关键词。该数据集是上工医疗技术有限公司从中国不同医院/医疗中心收集的“真实”患者信息。在这些机构中，眼底图像由市场上的各种相机捕获，例如Canon，Zeiss和Kowa，因此导致各种各样的图像分辨率。病人的识别信息会被移除。注释由经过培训的人类读者进行标记，并具有质量控制管理。患者分为8个标签，包括正常（N），糖尿病（D），青光眼（G），白内障（C），AMD（A），高血压（H），近视（M）和其他疾病/异常（O）。FIRE 视网膜图像数据            名称      标注内容      类型      模态      数量      标签格式      文件格式                  FIRE 视网膜图像数据             分类      视网膜图像      129                    FIRE 是一个视网膜眼底图像数据集，包含 129张 眼底视网膜图像，由不同特征组合成 134对 图像组合。这些图像组合根据特质被划分为3类。眼底图像由 Nidek AFC-210 眼底照相机采集，分辨率为2912x2912，视觉仰角为40度。图像由 Papageorgiou Hospital 医院和Aristotle University of Thessaloniki大学共同构建，由于Thessaloniki 大学采集自39名患者。. 数据包括以下几部分内容：  1.成对的视网膜图像。 2.彩色ROI掩模（作为二值图像）。 3.特征ROI掩模（作为二值图像）。 4.每个图像对应的标注点。STARE            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  STARE      眼底血管      分割      眼底照片      400      照片      照片      无      STructured Analysis of the Retina数据集包含400张眼底照片，作者团队对这些数据进行了多种诊断，并对部分数据的血管进行了标注Aistudio下载CHASE_DB1            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  CHASE_DB1      眼底血管      分割      眼底照片      28      png      png      无      Kinston大学公开的一个小规模眼底分割数据集，包含28张眼底照片及对应的分割标签。Aistudio下载IDRiD            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  IDRiD      常见DR病灶、视盘、DR病变等级等      分类、检测、分割      眼底照片      *      tif/csv      jpg      CC BY 4.0      Indian Diabetic Retinopathy Image Dataset (IDRiD)Aistudio下载前列腺PANDA            名称      标注内容      类型      模态      数量      标签格式      文件格式                  PANDA      前列腺癌分级             镜检图片      10616张镜检      分类      tiff      MSD前列腺分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD前列腺分割      前列腺中央腺体及外周区域      分割      多模态核磁      32(训练)+16(测试)                    CC-BY-SA 4.0      Aistudio下载QIN-PROSTATE-Repeatability            名称      标注内容      类型      模态      数量      标签格式      文件格式                  QIN-PROSTATE-Repeatability      前列腺癌　             MRI      15      　　      dcm      Aistudio下载胰腺MSD胰腺分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  MSD胰腺分割      胰腺肿瘤      分割      CT      282(训练)+139(验证)      0/1      nii      CC-BY-SA 4.0      Aistudio下载PDMR-833975-119-R            名称      标注内容      类型      模态      数量      标签格式      文件格式                  PDMR-833975-119-R      　胰腺癌　             　MRI      20             dcm      Aistudio下载皮肤SIIM-ISIC Melanoma Classification            名称      标注内容      类型      模态      数量      标签格式      文件格式                  SIIM-ISIC Melanoma Classification      皮肤癌病变类别      分类      皮肤镜      88.3K张图片      类别      dicom      目前最大的皮肤镜图像集合，用来在皮肤病变图像中之别黑色素瘤，图片以DICOM格式提供，同时包含图像元数据，有的图像也以JPEG和TFRecord格式提供，TFRecords格式的图像已被调整为统一的1024x1024细胞Data Science Bowl 18            名称      标注内容      类型      模态      数量      标签格式      文件格式                  Data Science Bowl 18      细胞核      分割             841张/37333个细胞核      0/1      图片      细胞核分割数据集介绍论文： Nucleus segmentation across imaging experiments: the 2018 Data Science BowlAistudio下载血细胞涂片分类            名称      标注内容      类型      模态      数量      标签格式      文件格式                  血细胞涂片分类      四种血细胞类型      分类      镜检      12500      -      图片      血细胞分类数据集包含12500张四种血细胞的照片。图片是从大的血细胞涂片照片上截下来的，数据集经过增广。图片都很小，训练时注意IO瓶颈。Aistudio下载ISBI细胞跟踪            名称      标注内容      类型      模态      数量      标签格式      文件格式                  ISBI细胞跟踪      细胞像素级别位置      跟踪      镜检                    图片      在镜检视频中像素级跟踪细胞位置Aistudio下载 2D+Time Datasets骨骼MURA-1.1            名称      标注内容      类型      模态      数量      标签格式      文件格式                  MURA-1.1      正常/非正常      分类      x-ray      40561                    介绍论文： MURA: Large Dataset for Abnormality Detection in Musculoskeletal RadiographsAistudio下载RSNA Bone Age            名称      标注内容      类型      模态      数量      标签格式      文件格式                  RSNA Bone Age                                                Aistudio下载磁共振图像脊柱结构多类别三维自动分割            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  磁共振图像脊柱结构多类别三维自动分割      椎骨和椎间盘      分割      MRI T2WI      172      0/1      nii      Custom      Aistudio下载膝盖MRNet            名称      标注内容      类型      模态      数量      标签格式      文件格式                  MRNet                                                Aistudio下载脊椎Verse大规模脊椎分割数据集            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  VerSe      脊椎      分割                                  CC BY-SA 4.0      Aistudio下载VQAPathVQA            名称      标注内容      类型      模态      数量      标签格式      文件格式                  PathVQA                    图片      4998图片/32799问答             图片      介绍论文： PathVQA: 30000+ Questions for Medical Visual Question AnsweringAistudio下载内窥镜SARAS-MESAD            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  SARAS-MESAD      24种动作      静态背景动作识别      内窥镜      4(真实手术)+5(模拟手术)                    CC BY-NC-SA 4.0      SARAS-MESAD            名称      标注内容      类型      模态      数量      标签格式      文件格式      License                  SARAS-ESAD      21种手术动作      静态背景动作识别      内窥镜      22,601(训练)+4,574(测试)      图片      BB      CC BY-NC-SA      数字病理CAMELYON| 名称 | 标注内容 | 类型 | 模态 | 数量 | 标签格式 | 文件格式 | License || - | - | - | - | - | - | - | - || CAMELYON16，17 |  | | 镜检 |  | 图片 | BB | CC0 |交流群如果您对医学影像技术感兴趣，欢迎加入医学影像技术交流群 365213556 ，与更多大佬一起交流，共同进步！医学影像数据库TCIA:The Cancer Imaging ArchiveMedPix 包含超过12000名患者和59000张影像Belarus tuberculosis portal 包含结核病人的CT，胸透和检验数据Grand ChallengesLONI 神经相关医学影像参考项目/列表医学影像分割挑战胸部\\肺部ct数据集adalcabeamandrewStanford ML Groupomic tools各领域公开数据集medical-imaging-datasetsOpen-Access Medical Image RepositoriesMedical Image Datasets Download LinksHAM10000 datasetDermatology Image Classificationhavarduscburkelyisdisradiopediaaimi贡献者（按照首次贡献时间排序）多语言代码生成器 Mail : linhandev@qq.com自尊心3底迪ChenchenHu007lixinhui541吖吖查parap1uie-sJianpeng ZhaoRelease Note2021/5/21开始添加数据集图片，接受多次外部贡献，对存量数据集进行合规检查，数据集总量达到712020/11/20添加Issue模板，鼓励外部贡献，数据集数量达到672020/11/8在Github发布，整理格式，添加多个数据集2020/6/11添加LIDC-IDIR，编写数据压缩脚本2020/6/4添加MMWHS心脏分割数据集，SIIM皮肤病分类比赛数据集2020/5/27添加ISBI细胞分割，TCGA-LIHC肝脏，4D-Lung肺部数据集，围绕乳腺癌添加一系列数据集2020/5/20项目添加数据集计数和release note，数据集方面添加 RSNA骨龄，PathVQA，FIRE视网膜，DDSM乳腺癌等数据集2020/5/13项目在Aistudio公开，包含约40个数据集"
  },
  
  {
    "title": "玩转Github Page",
    "url": "/posts/Github-Page/",
    "categories": "Tool",
    "tags": "Blog, Jekyll, Github",
    "date": "2019-08-08 11:33:00 +0800",
    





    "snippet": "Github Pages是Github推出的一个免费静态网页托管服务。可以用来搭建个人博客，项目简介网站，组织官网等，简单稳定。这篇文章将详细介绍Pages的使用方法。开始前先来一段简介。Pages简介Pages的优点是不需要配服务器，数据库这些环境，简单稳定，而且免费。这使得Page很适合做个人博客，项目主页，企业官网这一类纯展示性质（可能也不产生收益 /笑哭）的站点。其缺点是只能托管静态网页。这不意味着Pages里不能有任何动态的元素，比如可以结合Issue实现博客评论（下文介绍）。但是要做功能复杂的网站或者做很多的数据处理，那还是有一个服务器后台会更方便。Pages主要有两方面功能：  使用Jekyll将项目中的markdown文件转换成网页  将Github项目指定Branch中的网页托管成网站Jekyll md转网页的功能很方便，但是灵活性比较差，速度比较慢，大概率用不到。托管的网页主要有三类来源：本地上传，Github Action和Page使用Jekyll从markdown转换，可以根据使用场景选择。比如项目简介网站通常会直接让Page用Jekyll把README.md转成一个单页的网站。个人博客使用这三种方式的都有，本地上传比较麻烦但是最灵活，让Page编译最简单但是限制也较多。项目主页从最简单的项目主页开始介绍。首先打开一个Github项目，点进Settings-&amp;gt;Pages页面。一个没开启Page的项目应该是这样的在Source这里选README.md所在的Branch后面的文件夹选项是指定在这个Branch下去哪找markdown文件。如果只有一个README.md的话保持默认/(root)就行，如果文档是分成多个文件可以放到docs文件夹下，选择/docs。保存。稍等一会访问提示的网址就能看到网页了。但是可能看起来比较素。可以在设置里选一个主题让网页好看一点。Page给了12个主题，让Page md转网页不建议选择外部主题。Page的文档中描述了如何使用外部主题但是Page用Jekyll转html的环境比较简单，很多主题都缺gem依赖，而且过程貌似没有log不好debug。如果想用第三方主题建议用Action创建一个环境编译。自定义域名Page的网址遵循一定的规则，比如个人博客都是 用户名.github.io，项目网站都是 用户名.github.io/项目名 。但是Page也支持自定义域名。非常明显要用自定义域名首先要自己有一个域名，这个在各大云厂商那都能买到，也可以到Freenom申请一个免费的。个人博客下面就到了这篇的重头戏，用Github Page部署个人博客。前面说了Page托管的网页有三种来源：Page用Jekyll转换，使用Action转换和本地上传。这三种方式都可以部署个人博客。首先一点背景知识：Jekyll是一个从文字生成静态网站的工具，ruby编写。Github Page 是 Github 推出的静态网站托管服务，每个用户有一个Repo可以放静态网页文件，Github提供免费托管，用户可以通过一个网址访问。这里注意Github Page托管的是静态网页，不是Jekyll主题的那些文件(所以也可以自己写一个静态的网站扔到Github上展示，将md转html的项目也不是只能用Jekyll)。二者组合就可以零成本部署一个个人博客。主题选择一个博客最明显的特征应该就是主题，选择一个功能丰富的主题可以省去后期自己一点点添加功能的麻烦。有很多Jekyll主题列表网站，比如  https://jekyllthemes.dev/  http://jekyllthemes.org/  http://themes.jekyllrc.org/里面的主题大多数是免费的，可以上去逛一逛。这里我选择的主题是chirpy。选择好主题后下载到本地，下一步是使用Jekyll将主题文件编译成静态网站并在Github上托管，其中编译这一步有三种实现方式：  Github 编译  Github Action 编译  本地编译这块有点复杂，自己也没完全研究明白。个人理解大致上是第一种和第二种都是使用Github Action进行的编译，只是第一种是用Github官方提供的Action脚本和ruby环境，包含的gem包比较少，所以大部分的主题会因为缺依赖编译失败。第二种自己写Action可以自己写GemFile，构建一个自己的环境，应该可以编译所有主题，但是操作起来蛮复杂。最恶心的是Github Action不会提供详细的 Jekyll 编译报错，这样如果出错只能看到是Jekyll编译失败了，不好Debug具体是什么问题。本地编译个人认为是最方便的，环境装起来并不复杂，能看到完整报错，本地编译完成就可以看到效果(利用Github编译必须push上去才能看到网页的效果)。直接推静态网页上Github不需要写复杂的编译Action，而且推完基本立即生效(Action编译还是比较慢的，大概1~5分钟)。安装环境首先安装ruby和Jekyll，这里记Arch Linux的步骤，其他系统参考官方安装文档sudo pacman -S ruby base-devel安装的过程中遇到小问题，pacman下清华源几个文件一直失败。解决的方法是上清华源的网站，直接下载对应的安装包文件之后安装。装好ruby之后换源，安装jekyll，bundle需要的gem包。# 添加 TUNA 源并移除默认源gem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/# 列出已有源gem sources -l# 应该只有 TUNA 一个gem install jekyll bundlerbundlejekyll # 测试安装是否正确# 头两行输出应该是# A subcommand is required.# jekyll 4.2.0 -- Jekyll is a blog-aware, static site generator in Ruby如果上面最后一行输出的是找不到 jekyll 命令，那应该是可执行文件路径里没有gem中的bin文件夹，仔细看看gem安装的输出应该针对这个问题有提示，把bin的路径添加到PATH变量里就行。比如我这Manjaro下路径是 ~/.gem/ruby/2.7.0/binexport PATH=$PATH:~/.gem/ruby/2.7.0/bin # 先试一下路径对不对jekyll# 如果输出正确了就把这行写到 ~/.bashrc 里，这样打开一个新命令行依旧有效echo &#39;export $PATH=$PATH:~/.gem/ruby/2.7.0/bin&#39; &amp;gt;&amp;gt; ~/.bashrc # 必需单引号，双引号变量会替换成值到这编译Jekyll的环境应该就配置好了，下一步对Github项目进行设置。Github项目设置创建一个新项目，项目名要求为 username.github.io。比如我的 Github 用户名为 linhandev ，那么项目就需要叫做 linhandev.github.io。创建时添加一个空的Readme，完成后将项目 clone 到本地。git clone https://github.com/username/username.github.iocd username.github.io # 进到项目里将选择的主题里所有的文件解压到项目里。应该有_config.yml，index.html之类的一堆文件和文件夹。之后我们给编译出来的网页文件单独创建一个branch，防止git的记录过多导致项目过大。git branch gh-pagegit checkout gh-page # 切换到新branchgit rm -r *git commit -m &quot;clean up&quot;git push --set-upstream origin gh-pagegit checkout main # 返回Jekyll项目的branch分支创建完成了，尝试进行build并推到 Github 上。git checkout main # 时刻确认好branch，否则可能有神奇的事情发生jekyll build # md转html# 在 main 分支 pushgit add *git commit -m &quot;modify&quot;git push# 将 _site 中生成的html网站放到 gh-page 分支的根目录里git checkout gh-pagemv _site .siterm -rf *mv .site/* .rm -rf .sitels# 在 gh-page 分支 pushgit add *git commit -m &quot;add&quot;git pushgit checkout main到这复杂的部分基本就完成了，最后到Github项目的Settings里，找到 GitHub Pages 的部分，将 Source 设成 gh-page，/root，保存。网站应该就可以访问了。评论给文章添加评论功能有很多种方案，但是所有添加评论的方案都不可能是纯静态的，所以光靠Github Page是实现不了。一些可能的方法包括  用Github的API  自己搭建一个评论服务器  用第三方的评论服务之前用的第三方服务hyvor，当时试运营是免费的但是现在已经收费了。之后发现了utteranc。这个利用Github Issue进行评论的工具，很好看，功能强大而且部署方便。按照utteranc网站上的引导选择设置，之后把代码插入到文章下面就可以用了。自定义域名配置好 Github Page ，直接就可以使用 https://username.github.io 访问网站，此外 Github Page 也支持自定义域名。首先将这个域名CNAME解析到 username.github.io，之后在项目的 Settings 里面填写自己的域名。这个时候gh-page branch里会多一个CNAME文件，本地注意pull一下否则会冲突。在main分支的根目录里也加入这个文件。之后就可以使用自己的域名访问了。之前从自定义域名转换回 Github 给的免费域名过程中遇到一点麻烦，输入免费域名总是直接跳转到之前解析的自己的域名，之后页面显示Github的404。后来翻文档发现需要清浏览器cache，清除之后就好使了。搜索跟评论一样，搜索也需要是静态的，大概有两种方式，可以通过谷歌或者百度的站内搜索实现，也可以将文章的信息写入js，在js中直接实现搜索，这样不依赖任何服务。目录文章比较长的时候有一个目录是很方便的，这个 项目的目录只能放在文章最顶上，不能和页面一起滚，但是用起来十分简单，而且是纯liquid的所以不需要gem。图片数学公式"
  }
  
]

